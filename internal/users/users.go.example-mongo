package users

import (
	"encoding/json"
	"net/http"

	"github.com/go-chi/chi"
	"gopkg.in/mgo.v2/bson"

	"github.com/dimaskiddo/codebase-go-rest/pkg/db"
	"github.com/dimaskiddo/codebase-go-rest/pkg/router"

	"github.com/dimaskiddo/codebase-go-rest/internal/users/model"
)

// resGetUsers Struct
type resGetUsers struct {
	Status  bool         `json:"status"`
	Code    int          `json:"code"`
	Message string       `json:"message"`
	Data    []model.User `json:"data"`
}

// GetUser Function to Get All User Data
func GetUser(w http.ResponseWriter, r *http.Request) {
	var users []model.User

	// Database Query
	err := db.Mongo.C("users").Find(bson.M{}).All(&users)
	if err != nil {
		router.ResponseInternalError(w, err.Error())
		return
	}

	var response resGetUsers

	// Set Response Data
	response.Status = true
	response.Code = http.StatusOK
	response.Message = "Success"
	response.Data = users

	// Write Response Data to HTTP
	router.ResponseWrite(w, response.Code, response)
}

// AddUser Function to Add User Data
func AddUser(w http.ResponseWriter, r *http.Request) {
	var user model.User

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Set User ID to New Generated ID
	user.ID = bson.NewObjectId()

	// Database Query
	err := db.Mongo.C("users").Insert(&user)
	if err != nil {
		router.ResponseInternalError(w, err.Error())
		return
	}

	router.ResponseCreated(w)
}

// GetUserByID Function to Get User Data By User ID
func GetUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	paramID := chi.URLParam(r, "id")

	// Check if ID is Valid Object ID Hex
	if !bson.IsObjectIdHex(paramID) {
		router.ResponseBadRequest(w, "invalid object ids")
		return
	}

	var user model.User

	// Database Query
	err := db.Mongo.C("users").FindId(bson.ObjectIdHex(paramID)).One(&user)
	if err != nil {
		router.ResponseInternalError(w, err.Error())
		return
	}

	var users []model.User
	var response resGetUsers

	// Convert Selected User from Users Array to Single User Array
	users = append(users, user)

	// Set Response Data
	response.Status = true
	response.Code = http.StatusOK
	response.Message = "Success"
	response.Data = users

	// Write Response Data to HTTP
	router.ResponseWrite(w, response.Code, response)
}

// PutUserByID Function to Update User Data By User ID
func PutUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	paramID := chi.URLParam(r, "id")

	// Check if ID is Valid Object ID Hex
	if !bson.IsObjectIdHex(paramID) {
		router.ResponseBadRequest(w, "invalid object ids")
		return
	}

	var user model.User

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Set User ID to Requested ID
	user.ID = bson.ObjectIdHex(paramID)

	// Database Query
	err := db.Mongo.C("users").UpdateId(bson.ObjectIdHex(paramID), &user)
	if err != nil {
		router.ResponseInternalError(w, err.Error())
		return
	}

	router.ResponseUpdated(w)
}

// DelUserByID Function to Delete User Data By User ID
func DelUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	paramID := chi.URLParam(r, "id")

	// Check if ID is Valid Object ID Hex
	if !bson.IsObjectIdHex(paramID) {
		router.ResponseBadRequest(w, "invalid object ids")
		return
	}

	// Database Query Delete User
	err := db.Mongo.C("users").RemoveId(bson.ObjectIdHex(paramID))
	if err != nil {
		router.ResponseInternalError(w, err.Error())
		return
	}

	router.ResponseSuccess(w, "")
}
